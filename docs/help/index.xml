<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Help on</title><link>/docs/help/</link><description>Recent content in Help on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Tue, 06 Oct 2020 08:49:15 +0000</lastBuildDate><atom:link href="/docs/help/index.xml" rel="self" type="application/rss+xml"/><item><title>Resolve you cluster domain</title><link>/docs/help/hostname_resolution/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/help/hostname_resolution/</guid><description>If you are running a local k8s instance, you might want to configure your local setup so that it is able to resolve the domain of the cluster. So that out-of-cluster running programs can access your services.
There are a couple of options available to you, all with their pros &amp;amp; cons. We will list some of them in this document. Note that this is not a exhaustive coverage of all the possibilities and feel free to contribute to the documentation if you have other ways of doing this.</description></item><item><title>Building</title><link>/docs/help/building/</link><pubDate>Tue, 06 Oct 2020 08:49:31 +0000</pubDate><guid>/docs/help/building/</guid><description>Building the operator # Prerequisites # Go # Download the Go version v1.21.11 from the download page and install it following the installation instructions.
Operator SDK # Install Operator SDK version v1.28.0 following the installation instructions from a GitHub release.
Docker # Install Docker following the installation instructions.
Get the code # git clone https://github.com/artemiscloud/activemq-artemis-operator cd activemq-artemis-operator git checkout main Building the code locally # make or
make build Building the operator image # There are 2 variables you may need to override in order to push the images to your preferred registry.</description></item><item><title>Bundle</title><link>/docs/help/bundle/</link><pubDate>Tue, 06 Oct 2020 08:49:31 +0000</pubDate><guid>/docs/help/bundle/</guid><description>Bundle # Operator Lifecycle Manager (OLM) # The Operator Lifecycle Manager can help users to install and manage operators. The ArtemisCloud operator can be built into a bundle image and installed into OLM.
Install OLM # Check out the latest releases on github for release-specific install instructions.
Create a repository # Create a repository that Kubernetes will uses to pull your catalog image. You can create a public one for free on quay.</description></item><item><title>Custom Resources</title><link>/docs/help/custom-resources/</link><pubDate>Tue, 06 Oct 2020 08:49:31 +0000</pubDate><guid>/docs/help/custom-resources/</guid><description>Custom Resource configuration reference # A Custom Resource Definition (CRD) is a schema of configuration items for a custom Kubernetes object deployed with an Operator. By deploying a corresponding Custom Resource (CR) instance, you specify values for configuration items shown in the CRD.
The following sub-sections detail the configuration items that you can set in Custom Resource instances based on the main broker and addressing CRDs.
Broker Custom Resource configuration reference # A CR instance based on the main broker CRD enables you to configure brokers for deployment in a Kubernetes project, see the artemiscloud/activemq-artemis-operator CRDs.</description></item><item><title>Images</title><link>/docs/help/images/</link><pubDate>Tue, 06 Oct 2020 08:49:31 +0000</pubDate><guid>/docs/help/images/</guid><description>Overview of the ArtemisCloud Container images # Docs to Follow
The basic Container Image # The Basic Broker Container Image is the simplest of images to get started with, it uses environment variables to configure the broker and then starts it. You can find the basic Broker Container Image at quay.io
The Kubernetes Image # The Init Image # The Operator Image #</description></item><item><title>Operator</title><link>/docs/help/operator/</link><pubDate>Tue, 06 Oct 2020 08:49:31 +0000</pubDate><guid>/docs/help/operator/</guid><description>Overview of the ArtemisCloud Operator Custom Resource Definitions # In general, a Custom Resource Definition (CRD) is a schema of configuration items that you can modify for a custom Kubernetes object deployed with an Operator. By creating a corresponding Custom Resource (CR) instance, you can specify values for configuration items in the CRD. If you are an Operator developer, what you expose through a CRD essentially becomes the API for how a deployed object is configured and used.</description></item><item><title/><link>/docs/help/logging-guidelines/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/help/logging-guidelines/</guid><description>Logging Guidlines # When you need add logging to your code, please consider the following rules:
The operator configures the root logger (i.e. ctrl.Log) in main.go, so each new logger should be created from it in order to inherit the properties of it.
Each logical object (like struct type) should use it&amp;rsquo;s own logger with a proper name. Normally the process is use ctrl.Log.WithName(name) to create the logger and pass it to the struct&amp;rsquo;s constructor.</description></item></channel></rss>